// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: protobuf/server.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StringFunction_Reverse_FullMethodName  = "/server.StringFunction/Reverse"
	StringFunction_BidiEcho_FullMethodName = "/server.StringFunction/BidiEcho"
)

// StringFunctionClient is the client API for StringFunction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringFunctionClient interface {
	Reverse(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	BidiEcho(ctx context.Context, opts ...grpc.CallOption) (StringFunction_BidiEchoClient, error)
}

type stringFunctionClient struct {
	cc grpc.ClientConnInterface
}

func NewStringFunctionClient(cc grpc.ClientConnInterface) StringFunctionClient {
	return &stringFunctionClient{cc}
}

func (c *stringFunctionClient) Reverse(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, StringFunction_Reverse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringFunctionClient) BidiEcho(ctx context.Context, opts ...grpc.CallOption) (StringFunction_BidiEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &StringFunction_ServiceDesc.Streams[0], StringFunction_BidiEcho_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stringFunctionBidiEchoClient{stream}
	return x, nil
}

type StringFunction_BidiEchoClient interface {
	Send(*RequestMessage) error
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type stringFunctionBidiEchoClient struct {
	grpc.ClientStream
}

func (x *stringFunctionBidiEchoClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stringFunctionBidiEchoClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StringFunctionServer is the server API for StringFunction service.
// All implementations must embed UnimplementedStringFunctionServer
// for forward compatibility
type StringFunctionServer interface {
	Reverse(context.Context, *RequestMessage) (*ResponseMessage, error)
	BidiEcho(StringFunction_BidiEchoServer) error
	mustEmbedUnimplementedStringFunctionServer()
}

// UnimplementedStringFunctionServer must be embedded to have forward compatible implementations.
type UnimplementedStringFunctionServer struct {
}

func (UnimplementedStringFunctionServer) Reverse(context.Context, *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reverse not implemented")
}
func (UnimplementedStringFunctionServer) BidiEcho(StringFunction_BidiEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiEcho not implemented")
}
func (UnimplementedStringFunctionServer) mustEmbedUnimplementedStringFunctionServer() {}

// UnsafeStringFunctionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringFunctionServer will
// result in compilation errors.
type UnsafeStringFunctionServer interface {
	mustEmbedUnimplementedStringFunctionServer()
}

func RegisterStringFunctionServer(s grpc.ServiceRegistrar, srv StringFunctionServer) {
	s.RegisterService(&StringFunction_ServiceDesc, srv)
}

func _StringFunction_Reverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringFunctionServer).Reverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StringFunction_Reverse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringFunctionServer).Reverse(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringFunction_BidiEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StringFunctionServer).BidiEcho(&stringFunctionBidiEchoServer{stream})
}

type StringFunction_BidiEchoServer interface {
	Send(*ResponseMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type stringFunctionBidiEchoServer struct {
	grpc.ServerStream
}

func (x *stringFunctionBidiEchoServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stringFunctionBidiEchoServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StringFunction_ServiceDesc is the grpc.ServiceDesc for StringFunction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringFunction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.StringFunction",
	HandlerType: (*StringFunctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reverse",
			Handler:    _StringFunction_Reverse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidiEcho",
			Handler:       _StringFunction_BidiEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/server.proto",
}
